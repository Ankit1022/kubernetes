# RBAC (Role Based Access Control)
#1. Role-based access control (RBAC) is a method of regulating access to computer or network resources based on the roles of individual 
#users within an enterprise.
#2.In this context, access is the ability of an individual user to perform a specific task, such as view, create, or modify a file. 
#3.The RBAC API declares four kinds of Kubernetes object: Role, ClusterRole, RoleBinding and ClusterRoleBinding. 
#4.An RBAC Role or ClusterRole contains rules that represent a set of permissions.
#5.A Role always sets permissions within a particular namespace; when you create a Role, you have to specify the namespace it belongs in.
#6.ClusterRole, by contrast, is a non-namespaced resource.
#
#Here's an example Role in the "default" namespace that can be used to grant read access to pods:
#
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

#
#Here is an example of a ClusterRole that can be used to grant read access to secrets in any particular namespace, or across all namespaces:
#
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: secret-reader
rules:
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
#
#
#RoleBinding and ClusterRoleBinding?
#
#A role binding grants the permissions defined in a role to a user or set of users. 
#It holds a list of subjects (users, groups, or service accounts), and a reference to the role being granted. 
#A RoleBinding grants permissions within a specific namespace whereas a ClusterRoleBinding grants that access cluster-wide.
#
#Here is an example of a RoleBinding that grants the "pod-reader" Role to the user "jane" within the "default" namespace.
#
#
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: User
  name: jane # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io

#
#
#


